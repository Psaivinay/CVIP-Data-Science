# -*- coding: utf-8 -*-
"""CVIP#Data Science

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bKZ6KB8REpgLFTvFQXtQLFkzmJ8-FH8n
"""

import pandas as pd

# Load the dataset with a specific delimiter (e.g., tab '\t')
url = "https://drive.google.com/uc?export=download&id=1Po3o2bOsRY2s0DYXcTh0QErjEGeD_amn"
delimiter = '\t'  # Replace with the appropriate delimiter used in your CSV
df = pd.read_csv(url, delimiter=delimiter)
print(df)

import pandas as pd

# Load the dataset
url = "https://drive.google.com/uc?export=download&id=1Po3o2bOsRY2s0DYXcTh0QErjEGeD_amn"

# Read the first row to determine the number of columns in the dataset
header = pd.read_csv(url, nrows=1).columns

# Load the dataset while skipping rows with inconsistent column counts
df = pd.read_csv(url, names=header, error_bad_lines=False)

print(df)

import pandas as pd

# Load the dataset
url = "https://drive.google.com/uc?export=download&id=1Po3o2bOsRY2s0DYXcTh0QErjEGeD_amn"
df = pd.read_csv(url)
print(df)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib.pyplot as plt

import sklearn
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,confusion_matrix

import pandas as pd

# Load the dataset
url = "https://drive.google.com/uc?export=download&id=1Po3o2bOsRY2s0DYXcTh0QErjEGeD_amn"

# Define the column names based on the structure of your data
column_names = [
    "State/UTs", "Total Cases", "Active", "Discharged",
    "Deaths", "Active Ratio", "Discharge Ratio",
    "Death Ratio", "Population"
]

# Load the data into a DataFrame with custom column names
df = pd.read_csv(url, delimiter=',', names=column_names, skiprows=1)

# Display the first few rows of the DataFrame
print(df.head())

# Continue with the rest of the analysis

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
url = "https://drive.google.com/uc?export=download&id=1Po3o2bOsRY2s0DYXcTh0QErjEGeD_amn"

# Define the column names
column_names = [
    "State/UTs", "Total Cases", "Active", "Discharged",
    "Deaths", "Active Ratio", "Discharge Ratio",
    "Death Ratio", "Population"
]

# Load the data into a DataFrame
df = pd.read_csv(url, delimiter=',', names=column_names, skiprows=1)

# Visualize using a pie chart: Distribution of COVID-19 cases by status
labels = ['Active', 'Discharged', 'Deaths']
sizes = [df['Active'].sum(), df['Discharged'].sum(), df['Deaths'].sum()]
colors = ['gold', 'lightskyblue', 'lightcoral']
explode = (0.1, 0, 0)  # explode the 1st slice (Active)
plt.figure(figsize=(8, 6))
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
        autopct='%1.1f%%', shadow=True, startangle=140)
plt.axis('equal')
plt.title('Distribution of COVID-19 Cases by Status')
plt.show()

# Visualize using a bar graph: Top 10 states with the highest Total Cases
top_states = df.nlargest(10, 'Total Cases')
plt.figure(figsize=(12, 6))
plt.bar(top_states['State/UTs'], top_states['Total Cases'], color='blue')
plt.xlabel('State/UTs')
plt.ylabel('Total Cases')
plt.title('Top 10 States with the Highest Total Cases')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Continue with more visualizations as needed

plt.figure(figsize=(12, 6))
plt.bar(df['State/UTs'], df['Active'], label='Active Cases', color='orange')
plt.bar(df['State/UTs'], df['Discharged'], bottom=df['Active'], label='Discharged Cases', color='green')
plt.xlabel('State/UTs')
plt.ylabel('Number of Cases')
plt.title('Active vs Discharged COVID-19 Cases by State/UT')
plt.xticks(rotation=90)
plt.legend()
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))
plt.bar(df['State/UTs'], df['Death Ratio'], color='red')
plt.xlabel('State/UTs')
plt.ylabel('Death Ratio')
plt.title('COVID-19 Death Ratio Comparison by State/UT')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(df['Active Ratio'], bins=20, color='blue', alpha=0.7)
plt.xlabel('Active Ratio')
plt.ylabel('Frequency')
plt.title('Distribution of Active Ratios')
plt.tight_layout()
plt.show()

import seaborn as sns

correlation_matrix = df.corr()
plt.figure(figsize=(10, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix Heatmap')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(df['Population'], df['Total Cases'], color='purple', alpha=0.7)
plt.xlabel('Population')
plt.ylabel('Total Cases')
plt.title('Population vs Total COVID-19 Cases')
plt.xscale('log')
plt.yscale('log')
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 8))
df_sorted = df.sort_values('Total Cases', ascending=False)
plt.barh(df_sorted['State/UTs'], df_sorted['Total Cases'], color='skyblue', label='Total Cases')
plt.barh(df_sorted['State/UTs'], df_sorted['Deaths'], color='orange', label='Deaths')
plt.xlabel('Counts')
plt.ylabel('State/UTs')
plt.title('State-wise Total Cases and Deaths Comparison')
plt.legend()
plt.tight_layout()
plt.show()

import seaborn as sns

numeric_columns = ['Total Cases', 'Active', 'Discharged', 'Deaths', 'Active Ratio', 'Discharge Ratio', 'Death Ratio', 'Population']
correlation_matrix = df[numeric_columns].corr()
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0)
plt.title('Correlation Heatmap')
plt.show()

plt.figure(figsize=(8, 6))
plt.scatter(df['Active Ratio'], df['Discharge Ratio'], color='blue')
plt.xlabel('Active Ratio')
plt.ylabel('Discharge Ratio')
plt.title('Active Ratio vs. Discharge Ratio')
plt.grid(True)
plt.show()

plt.figure(figsize=(8, 6))
sns.regplot(x='Population', y='Total Cases', data=df)
plt.xlabel('Population')
plt.ylabel('Total Cases')
plt.title('Population vs. Total Cases')
plt.show()

# Display the first few rows of the DataFrame
print(df.head())

# Display summary statistics
print(df.describe())

# Display the unique states/UTs in the dataset
unique_states = df['State/UTs'].unique()
print("Unique States/UTs:", unique_states)

